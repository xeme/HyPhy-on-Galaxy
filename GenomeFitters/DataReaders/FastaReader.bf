/* FASTAReader.bf is an input module for HyPhy genomic analyses.It reads multiple alignment FASTA files, where each successivealignments are separated by one or more empty lines.Optionally, a tree can be provided (if it is provided, allalignments are assumed to have the same tree, otherwise a tree is inferred for each alignment; the method of inferenceis selected in the analysis module).Written by SL Kosakovsky Pond in June 2007.spond@ucsd.eduInputs:1). [PATH] 		The location of the core analysis batch file2). [PATH] 		The location of the output module batch file3). [STRING]	Newick tree string.		If a non-empty tree is supplied, then it is assumed that each of 	the input alignments has this tree (and hence limits the naming	and the number of taxa in each alignment so that they match the tree).	All alignments which do not match the tree will be flagged as non-conforming			If an empty string is provided, then it is assumed that	analysis module will infer a tree (e.g. using NJ) for each alignment4). [PATH]		The location where the result file should be written.Utilities dependancies:None*/	/*   Prompt for paths to the analysis and output modules   The input is specified in the configuration file */fscanf					(stdin, "String", _coreAnalysis);fscanf					(stdin, "String", _outputDriver);/* prompt for the tree; if the tree is empty then use    neighbor-joining to build the trees */   SetDialogPrompt 		("Tree file");fscanf	        		(stdin, "String",  treeString);if (Abs(treeString)){	Tree		givenTree	= treeString;	treeBranchNames			= BranchName (givenTree,-1);	treeBranchCount			= Columns    (treeBranchNames)-1;	treeString 				= Format (givenTree,1,1);	fprintf (stdout, "\n[USING ", treeString, " TREE]\n");}else{	fprintf (stdout, "\n[USING INFERRED TREES]\n");}/* read in the name (provided in the configuration file)   and the contents of a multiple alignment FASTA file */   SetDialogPrompt ("Multiple gene FASTA file:");fscanf          (PROMPT_FOR_FILE, "Lines", inLines);/* where to write the results analyses;   _outPath is used by writer modules */fscanf			(stdin, "String", _outPath); /* load the other analysis and writer modules  */ExecuteAFile	(_outputDriver);ExecuteAFile	(_coreAnalysis); /* execute preliminary output (e.g. write column headers);this function must be defined in the output module */_prepareFileOutput (_outPath); /*---------------------------------------------------------Parse individual alignments (new lines separate them)If a single tree is provided, then all alignments are assumedto have the same number of taxa, with prefixes of taxa namesmatching leaf labels in the tree (e.g. human.gene1234.frag1will match with human; case insenstive)For each gene _processAGene is called - this function must be defined in the output module. _processAGene takes a boolean flag (valid alignment or not) and the number of the gene beingprocessed. ---------------------------------------------------------*/_linesIn     = Columns (inLines);_currentGene   = 1;  _currentState = 0;/* 0 - waiting for a non-empty line *//* 1 - reading files *//* this syntax turns geneSeqs into a string buffer (initial size 128)Other strings (or objects that can be converted to strings) can be appended to it using the '*' operator. '*0' command finalizes the buffer - turning it into a normal string object */geneSeqs       = "";geneSeqs 	   * 128;for (l=0; l<_linesIn; l=l+1){	if (Abs(inLines[l]) == 0)	{		if (_currentState == 1)		{			geneSeqs      * 0;			DataSet 	  ds 		   = ReadFromString (geneSeqs);			_processAGene ((Abs(treeString) == 0 || ds.species == treeBranchCount),_currentGene,"Incorrect number of sequences");			geneSeqs * 128;			_currentGene = _currentGene + 1;		}	}	else	{		if (_currentState == 0)		{			_currentState = 1;		}		geneSeqs * inLines[l];		geneSeqs * "\n";	}}if (_currentState == 1){	geneSeqs      * 0;	DataSet 	  ds 		   = ReadFromString (geneSeqs);	_processAGene ((Abs(treeString) == 0 || ds.species == treeBranchCount),_currentGene,"Incorrect number of sequences");}/* execute commands needed to finish up result writing (e.g. compute averages)   the function must be defined */_finishFileOutput (0);